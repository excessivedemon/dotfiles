" Enable syntax highlighting and file type detection
filetype plugin indent on
syntax on

" General settings
set nu
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set incsearch
set ruler
" Set up coc.nvim for Rust
let g:coc_global_extensions = ["coc-rust-analyzer"]

" Key mappings for coc.nvim
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Auto-complete
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Show diagnostics on cursor hold
autocmd CursorHold * silent call CocActionAsync("diagnosticInfo")

" Automatically format on save with coc.nvim
autocmd BufWritePre *.rs :call CocAction("format")

" Key mappings to scroll the documentation window
" Insert mode scrolling
inoremap <silent><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<C-f>"
inoremap <silent><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<C-b>"
" Normal mode scrolling
nnoremap <silent><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
" Visual mode scrolling
vnoremap <silent><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Set colorscheme to gruvbox
if empty(glob("~/.vim/pack/plugins/start/gruvbox"))
  silent !mkdir -p ~/.vim/pack/plugins/start
  silent !git clone https://github.com/morhetz/gruvbox ~/.vim/pack/plugins/start/gruvbox
endif
colorscheme gruvbox

" Function to toggle rust-analyzer inlay hints
function! ToggleInlayHints()
  let hints_enabled = get(g:, "rust_analyzer_inlay_hints", 1)
  if hints_enabled
    call coc#config("rust-analyzer.inlayHints.typeHints", v:false)
    call coc#config("rust-analyzer.inlayHints.parameterHints", v:false)
    call coc#config("rust-analyzer.inlayHints.chainingHints", v:false)
    call coc#config("rust-analyzer.inlayHints.returnHints", v:false)
    let g:rust_analyzer_inlay_hints = 0
  else
    call coc#config("rust-analyzer.inlayHints.typeHints", v:true)
    call coc#config("rust-analyzer.inlayHints.parameterHints", v:true)
    call coc#config("rust-analyzer.inlayHints.chainingHints", v:true)
    call coc#config("rust-analyzer.inlayHints.returnHints", v:true)
    let g:rust_analyzer_inlay_hints = 1
  endif
  execute "CocRestart"
endfunction

" Key bindings to toggle type hints
nnoremap <leader>ih :call ToggleInlayHints()<CR>

" Key binding to trigger code actions (including auto-import)
nnoremap <leader>ca :call CocActionAsync("codeAction")<CR>

" OpenAI Integration
function! SendToOpenAI()
    let content = join(getline(1, '$'), "\n")
    let prompt = input('Enter your prompt: ')

    " Call the Bash script
    let command = 'bash ~/.vim/send_buffer_to_openai.sh ' . shellescape(content, 1) . ' ' . shellescape(prompt, 1)
    let response = system(command)

    " Open a new buffer for the response
    exe "vnew"
    let response_buffer = bufnr('%')
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile
    call setline(1, split(response, "\n"))
endfunction

nnoremap <Leader>oai :call SendToOpenAI()<CR>
